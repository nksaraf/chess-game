/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from "three";
import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three/examples/jsm/loaders/GLTFLoader";

type GLTFResult = GLTF & {
  nodes: {
    Rook: THREE.Mesh;
    Queen: THREE.Mesh;
    Bishop: THREE.Mesh;
    King: THREE.Mesh;
    Knight: THREE.Mesh;
    Pawn: THREE.Mesh;
  };
  materials: {
    white_piece: THREE.MeshStandardMaterial;
    black_piece: THREE.MeshStandardMaterial;
  };
};

export default function Model({
  piece = "Queen",
  color = "black",
  ...props
}: JSX.IntrinsicElements["group"] & {
  piece: keyof GLTFResult["nodes"];
  color: "black" | "white";
}) {
  const group = useRef<THREE.Group>();
  const { nodes, materials } = useGLTF(
    "/low_poly_chess_set/pieces.glb"
  ) as GLTFResult;
  return (
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
        <mesh
          name="Rook"
          castShadow
          receiveShadow
          geometry={nodes[piece].geometry}
          material={(materials as any)[color + "_piece"]}
          rotation={[-Math.PI / 2, 0, color === "black" ? Math.PI : 0]}
          userData={{ name: "Rook" }}
        />
        {/* <mesh
          name="Queen"
          castShadow
          receiveShadow
          geometry={nodes.Queen.geometry}
          material={materials.black_piece}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Queen" }}
        />
        <mesh
          name="Bishop"
          castShadow
          receiveShadow
          geometry={nodes.Bishop.geometry}
          material={nodes.Bishop.material}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Bishop" }}
        />
        <mesh
          name="King"
          castShadow
          receiveShadow
          geometry={nodes.King.geometry}
          material={nodes.King.material}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "King" }}
        />
        <mesh
          name="Knight"
          castShadow
          receiveShadow
          geometry={nodes.Knight.geometry}
          material={nodes.Knight.material}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Knight" }}
        />
        <mesh
          name="Pawn"
          castShadow
          receiveShadow
          geometry={nodes.Pawn.geometry}
          material={nodes.Pawn.material}
          rotation={[-Math.PI / 2, 0, 0]}
          userData={{ name: "Pawn" }}
        /> */}
      </group>
    </group>
  );
}

useGLTF.preload("/low_poly_chess_set/pieces.glb");
